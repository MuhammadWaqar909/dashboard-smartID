{"version":3,"sources":["routes.js","components/AppBreadcrumb.js","components/AppContent.js","components/AppFooter.js","assets/images/avatars/2.jpg","components/header/AppHeaderDropdown.js","components/AppHeader.js","components/AppSidebarNav.js","_nav.js","components/AppSidebar.js","layout/DefaultLayout.js"],"names":["Dashboard","React","lazy","Customers","routes","path","exact","name","component","AppBreadcrumb","currentLocation","useLocation","pathname","getRouteName","find","route","breadcrumbs","location","split","reduce","prev","curr","index","array","currentPathname","push","active","length","getBreadcrumbs","className","href","map","breadcrumb","key","memo","AppContent","lg","fallback","color","idx","render","props","from","to","AppFooter","fixed","target","rel","process","AppHeaderDropdown","Logout","setLogout","useState","useEffect","console","log","localStorage","removeItem","window","reload","variant","placement","caret","src","avatar","size","onClick","icon","cilLockLocked","AppHeader","dispatch","useDispatch","sidebarShow","useSelector","state","position","fluid","type","cilMenu","AppSidebarNav","items","navLink","badge","text","navItem","item","rest","Component","NavLink","activeClassName","navGroup","String","toggler","visible","startsWith","Fragment","User","JSON","parse","getItem","_nav","is_admin","CNavItem","cilSpeedometer","customClassName","cilDrop","AppSidebar","unfoldable","sidebarUnfoldable","onVisibleChange","height","navigation","DefaultLayout"],"mappings":"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","file":"static/js/7.c364bd0b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'))\nconst Customers = React.lazy(() => import('./views/customers/Customers'))\nconst CustomersAdd = React.lazy(() => import('./views/customers/CustomerAdd'))\n// const Colors = React.lazy(() => import('./views/theme/colors/Colors'))\n// const Typography = React.lazy(() => import('./views/theme/typography/Typography'))\n\n// Base\n// const Accordion = React.lazy(() => import('./views/base/accordion/Accordion'))\n// const Breadcrumbs = React.lazy(() => import('./views/base/breadcrumbs/Breadcrumbs'))\n// const Cards = React.lazy(() => import('./views/base/cards/Cards'))\n// const Carousels = React.lazy(() => import('./views/base/carousels/Carousels'))\n// const Collapses = React.lazy(() => import('./views/base/collapses/Collapses'))\n// const ListGroups = React.lazy(() => import('./views/base/list-groups/ListGroups'))\n// const Navs = React.lazy(() => import('./views/base/navs/Navs'))\n// const Paginations = React.lazy(() => import('./views/base/paginations/Paginations'))\n// const Placeholders = React.lazy(() => import('./views/base/placeholders/Placeholders'))\n// const Popovers = React.lazy(() => import('./views/base/popovers/Popovers'))\n// const Progress = React.lazy(() => import('./views/base/progress/Progress'))\n// const Spinners = React.lazy(() => import('./views/base/spinners/Spinners'))\n// const Tables = React.lazy(() => import('./views/base/tables/Tables'))\n// const Tooltips = React.lazy(() => import('./views/base/tooltips/Tooltips'))\n\n// // Buttons\n// const Buttons = React.lazy(() => import('./views/buttons/buttons/Buttons'))\n// const ButtonGroups = React.lazy(() => import('./views/buttons/button-groups/ButtonGroups'))\n// const Dropdowns = React.lazy(() => import('./views/buttons/dropdowns/Dropdowns'))\n\n//Forms\n// const ChecksRadios = React.lazy(() => import('./views/forms/checks-radios/ChecksRadios'))\n// const FloatingLabels = React.lazy(() => import('./views/forms/floating-labels/FloatingLabels'))\n// const FormControl = React.lazy(() => import('./views/forms/form-control/FormControl'))\n// const InputGroup = React.lazy(() => import('./views/forms/input-group/InputGroup'))\n// const Layout = React.lazy(() => import('./views/forms/layout/Layout'))\n// const Range = React.lazy(() => import('./views/forms/range/Range'))\n// const Select = React.lazy(() => import('./views/forms/select/Select'))\n// const Validation = React.lazy(() => import('./views/forms/validation/Validation'))\n\n// const Charts = React.lazy(() => import('./views/charts/Charts'))\n\n// // Icons\n// const CoreUIIcons = React.lazy(() => import('./views/icons/coreui-icons/CoreUIIcons'))\n// const Flags = React.lazy(() => import('./views/icons/flags/Flags'))\n// const Brands = React.lazy(() => import('./views/icons/brands/Brands'))\n\n// Notifications\n// const Alerts = React.lazy(() => import('./views/notifications/alerts/Alerts'))\n// const Badges = React.lazy(() => import('./views/notifications/badges/Badges'))\n// const Modals = React.lazy(() => import('./views/notifications/modals/Modals'))\n// const Toasts = React.lazy(() => import('./views/notifications/toasts/Toasts'))\n\n// const Widgets = React.lazy(() = import('./views/widgets/Widgets'))\n\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  { path: '/dashboard', exact: true, name: 'Dashboard', component: Dashboard },\n  { path: '/customers/add', exact: true, name: 'CustomersAdd', component: CustomersAdd },\n  { path: '/customers', exact: true, name: 'Customers', component: Customers },\n  // { path: '/forms/layout', name: 'Layout', component: Layout },\n  // { path: '/theme', name: 'Theme', component: Colors, exact: true },\n  // { path: '/theme/colors', name: 'Colors', component: Colors },\n  // { path: '/theme/typography', name: 'Typography', component: Typography },\n  // { path: '/base', name: 'Base', component: Cards, exact: true },\n  // { path: '/base/accordion', name: 'Accordion', component: Accordion },\n  // { path: '/base/breadcrumbs', name: 'Breadcrumbs', component: Breadcrumbs },\n  // { path: '/base/cards', name: 'Cards', component: Cards },\n  // { path: '/base/carousels', name: 'Carousel', component: Carousels },\n  // { path: '/base/collapses', name: 'Collapse', component: Collapses },\n  // { path: '/base/list-groups', name: 'List Groups', component: ListGroups },\n  // { path: '/base/navs', name: 'Navs', component: Navs },\n  // { path: '/base/paginations', name: 'Paginations', component: Paginations },\n  // { path: '/base/placeholders', name: 'Placeholders', component: Placeholders },\n  // { path: '/base/popovers', name: 'Popovers', component: Popovers },\n  // { path: '/base/progress', name: 'Progress', component: Progress },\n  // { path: '/base/spinners', name: 'Spinners', component: Spinners },\n  // { path: '/base/tables', name: 'Tables', component: Tables },\n  // { path: '/base/tooltips', name: 'Tooltips', component: Tooltips },\n  // { path: '/buttons', name: 'Buttons', component: Buttons, exact: true },\n  // { path: '/buttons/buttons', name: 'Buttons', component: Buttons },\n  // { path: '/buttons/dropdowns', name: 'Dropdowns', component: Dropdowns },\n  // { path: '/buttons/button-groups', name: 'Button Groups', component: ButtonGroups },\n  // { path: '/charts', name: 'Charts', component: Charts },\n  // { path: '/forms', name: 'Forms', component: FormControl, exact: true },\n  // { path: '/forms/form-control', name: 'Form Control', component: FormControl },\n  // { path: '/forms/select', name: 'Select', component: Select },\n  // { path: '/forms/checks-radios', name: 'Checks & Radios', component: ChecksRadios },\n  // { path: '/forms/range', name: 'Range', component: Range },\n  // { path: '/forms/input-group', name: 'Input Group', component: InputGroup },\n  // { path: '/forms/floating-labels', name: 'Floating Labels', component: FloatingLabels },\n  // { path: '/forms/validation', name: 'Validation', component: Validation },\n  // { path: '/icons', exact: true, name: 'Icons', component: CoreUIIcons },\n  // { path: '/icons/coreui-icons', name: 'CoreUI Icons', component: CoreUIIcons },\n  // { path: '/icons/flags', name: 'Flags', component: Flags },\n  // { path: '/icons/brands', name: 'Brands', component: Brands },\n  // { path: '/notifications', name: 'Notifications', component: Alerts, exact: true },\n  // { path: '/notifications/alerts', name: 'Alerts', component: Alerts },\n  // { path: '/notifications/badges', name: 'Badges', component: Badges },\n  // { path: '/notifications/modals', name: 'Modals', component: Modals },\n  // { path: '/notifications/toasts', name: 'Toasts', component: Toasts },\n  // { path: '/widgets', name: 'Widgets', component: Widgets },\n]\n\nexport default routes\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nimport routes from '../routes'\n\nimport { CBreadcrumb, CBreadcrumbItem } from '@coreui/react'\n\nconst AppBreadcrumb = () => {\n  const currentLocation = useLocation().pathname\n\n  const getRouteName = (pathname, routes) => {\n    const currentRoute = routes.find((route) => route.path === pathname)\n    return currentRoute.name\n  }\n\n  const getBreadcrumbs = (location) => {\n    const breadcrumbs = []\n    location.split('/').reduce((prev, curr, index, array) => {\n      const currentPathname = `${prev}/${curr}`\n      breadcrumbs.push({\n        pathname: currentPathname,\n        name: getRouteName(currentPathname, routes),\n        active: index + 1 === array.length ? true : false,\n      })\n      return currentPathname\n    })\n    return breadcrumbs\n  }\n\n  const breadcrumbs = getBreadcrumbs(currentLocation)\n\n  return (\n    <CBreadcrumb className=\"m-0 ms-2\">\n      <CBreadcrumbItem href=\"/\">Home</CBreadcrumbItem>\n      {breadcrumbs.map((breadcrumb, index) => {\n        return (\n          <CBreadcrumbItem\n            {...(breadcrumb.active ? { active: true } : { href: breadcrumb.pathname })}\n            key={index}\n          >\n            {breadcrumb.name}\n          </CBreadcrumbItem>\n        )\n      })}\n    </CBreadcrumb>\n  )\n}\n\nexport default React.memo(AppBreadcrumb)\n","import React, { Suspense } from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport { CContainer, CSpinner } from '@coreui/react'\n\n// routes config\nimport routes from '../routes'\n\nconst AppContent = () => {\n  return (\n    <CContainer lg>\n      <Suspense fallback={<CSpinner color=\"primary\" />}>\n        <Switch>\n          {routes.map((route, idx) => {\n            return (\n              route.component && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={(props) => (\n                    <>\n                      <route.component {...props} />\n                    </>\n                  )}\n                />\n              )\n            )\n          })}\n          <Redirect from=\"/\" to=\"/dashboard\" />\n        </Switch>\n      </Suspense>\n    </CContainer>\n  )\n}\n\nexport default React.memo(AppContent)\n","import React from 'react'\nimport { CFooter } from '@coreui/react'\n\nconst AppFooter = () => {\n  return (\n    <CFooter fixed={false}>\n      <div>\n        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {process.env.REACT_APP_PROJECT_NAME}\n        </a>\n        <span className=\"ml-1\">&copy; 2022 SmartMicros.</span>\n      </div>\n      {/* <div className=\"mfs-auto\">\n        <span className=\"mr-1\">Powered by</span>\n        <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">CoreUI for React</a>\n      </div> */}\n    </CFooter>\n  )\n}\n\nexport default React.memo(AppFooter)\n","export default __webpack_public_path__ + \"static/media/2.0c06e43d.jpg\";","import React, { useEffect, useState } from 'react'\nimport {\n  CAvatar,\n  // CBadge,\n  CDropdown,\n  // CDropdownDivider,\n  CDropdownHeader,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n} from '@coreui/react'\nimport {\n  // cilBell,\n  // cilCreditCard,\n  // cilCommentSquare,\n  // cilEnvelopeOpen,\n  // cilFile,\n  cilLockLocked,\n  // cilSettings,\n  // cilTask,\n  // cilUser,\n} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\n\nimport avatar from './../../assets/images/avatars/2.jpg'\nfunction logout() {\n  console.log('here')\n  localStorage.removeItem('token')\n  localStorage.removeItem('user')\n  window.location.reload(true)\n}\n\nconst AppHeaderDropdown = () => {\n  const [Logout, setLogout] = useState(false)\n\n  useEffect(() => {\n    if (Logout) {\n      logout()\n    }\n  }, [Logout])\n\n  return (\n    <CDropdown variant=\"nav-item\">\n      <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n        <CAvatar src={avatar} size=\"md\" />\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        <CDropdownHeader className=\"bg-light fw-semibold py-2\">Account</CDropdownHeader>\n        {/* <CDropdownItem href=\"#\">\n          <CIcon icon={cilBell} className=\"me-2\" />\n          Updates\n          <CBadge color=\"info\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilEnvelopeOpen} className=\"me-2\" />\n          Messages\n          <CBadge color=\"success\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilTask} className=\"me-2\" />\n          Tasks\n          <CBadge color=\"danger\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilCommentSquare} className=\"me-2\" />\n          Comments\n          <CBadge color=\"warning\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownHeader className=\"bg-light fw-semibold py-2\">Settings</CDropdownHeader>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilUser} className=\"me-2\" />\n          Profile\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilSettings} className=\"me-2\" />\n          Settings\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilCreditCard} className=\"me-2\" />\n          Payments\n          <CBadge color=\"secondary\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilFile} className=\"me-2\" />\n          Projects\n          <CBadge color=\"primary\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownDivider /> */}\n        <CDropdownItem\n          href=\"#\"\n          onClick={() => {\n            setLogout(true)\n          }}\n        >\n          <CIcon icon={cilLockLocked} className=\"me-2\" />\n          Logout\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default AppHeaderDropdown\n","import React from 'react'\n// import { NavLink } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CContainer,\n  CHeader,\n  // CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  // CNavLink,\n  CNavItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilMenu } from '@coreui/icons'\n\nimport { AppBreadcrumb } from './index'\nimport { AppHeaderDropdown } from './header/index'\n// import { logo } from 'src/assets/brand/logo'\n\nconst AppHeader = () => {\n  const dispatch = useDispatch()\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CHeader position=\"sticky\" className=\"mb-4\">\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          onClick={() => dispatch({ type: 'set', sidebarShow: !sidebarShow })}\n        >\n          <CIcon icon={cilMenu} size=\"lg\" />\n        </CHeaderToggler>\n        {/* <CHeaderBrand className=\"mx-auto d-md-none\" to=\"/\">\n          <CIcon icon={logo} height={48} alt=\"Logo\" />\n        </CHeaderBrand> */}\n        <CHeaderNav className=\"d-none d-md-flex me-auto\">\n          <CNavItem>\n            {/* <CNavLink to=\"/dashboard\" component={NavLink} activeClassName=\"active\">\n              Dashboard\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">Users</CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">Settings</CNavLink>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilBell} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilList} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n          <CNavItem> */}\n            {/* <CNavLink href=\"#\">\n              <CIcon icon={cilEnvelopeOpen} size=\"lg\" />\n            </CNavLink> */}\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav className=\"ms-3\">\n          <AppHeaderDropdown />\n        </CHeaderNav>\n      </CContainer>\n      <CHeaderDivider />\n      <CContainer fluid>\n        <AppBreadcrumb />\n      </CContainer>\n    </CHeader>\n  )\n}\n\nexport default AppHeader\n","import React from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport { CBadge } from '@coreui/react'\n\nexport const AppSidebarNav = ({ items }) => {\n  const location = useLocation()\n  const navLink = (name, icon, badge) => {\n    return (\n      <>\n        {icon && icon}\n        {name && name}\n        {badge && (\n          <CBadge color={badge.color} className=\"ms-auto\">\n            {badge.text}\n          </CBadge>\n        )}\n      </>\n    )\n  }\n\n  const navItem = (item, index) => {\n    const { component, name, badge, icon, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        {...(rest.to &&\n          !rest.items && {\n            component: NavLink,\n            activeClassName: 'active',\n          })}\n        key={index}\n        {...rest}\n      >\n        {navLink(name, icon, badge)}\n      </Component>\n    )\n  }\n  const navGroup = (item, index) => {\n    const { component, name, icon, to, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        idx={String(index)}\n        key={index}\n        toggler={navLink(name, icon)}\n        visible={location.pathname.startsWith(to)}\n        {...rest}\n      >\n        {item.items?.map((item, index) =>\n          item.items ? navGroup(item, index) : navItem(item, index),\n        )}\n      </Component>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      {items &&\n        items.map((item, index) => (item.items ? navGroup(item, index) : navItem(item, index)))}\n    </React.Fragment>\n  )\n}\n\nAppSidebarNav.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n}\n","import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  // cilBell,\n  // cilCalculator,\n  // cilChartPie,\n  // cilCursor,\n  cilDrop,\n  cilSpeedometer,\n  // cilStar,\n} from '@coreui/icons'\nimport { CNavItem } from '@coreui/react'\n\nconst User = JSON.parse(localStorage.getItem('user'))\nconsole.log(User)\n\nconst _nav =\n  (User?.type === 'admin' || User?.type === 'Admin') && User?.is_admin === true\n    ? [\n        {\n          component: CNavItem,\n          name: 'Dashboard',\n          to: '/dashboard',\n          icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\n        },\n        {\n          component: CNavItem,\n          name: 'Customer',\n          to: '/customers',\n          icon: <CIcon icon={cilDrop} customClassName=\"nav-icon\" />,\n        },\n      ]\n    : [\n        {\n          component: CNavItem,\n          name: 'Dashboard',\n          to: '/dashboard',\n          icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\n        },\n      ]\n\n// {\n//   component: CNavGroup,\n//   name: 'Base',\n//   to: '/base',\n//   icon: <CIcon icon={cilPuzzle} customClassName=\"nav-icon\" />,\n//   items: [\n//     {\n//       component: CNavItem,\n//       name: 'Accordion',\n//       to: '/base/accordion',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Breadcrumb',\n//       to: '/base/breadcrumbs',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Cards',\n//       to: '/base/cards',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Carousel',\n//       to: '/base/carousels',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Collapse',\n//       to: '/base/collapses',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'List group',\n//       to: '/base/list-groups',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Navs & Tabs',\n//       to: '/base/navs',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Pagination',\n//       to: '/base/paginations',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Placeholders',\n//       to: '/base/placeholders',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Popovers',\n//       to: '/base/popovers',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Progress',\n//       to: '/base/progress',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Spinners',\n//       to: '/base/spinners',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Tables',\n//       to: '/base/tables',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Tooltips',\n//       to: '/base/tooltips',\n//     },\n//   ],\n// },\n// {\n//   component: CNavGroup,\n//   name: 'Buttons',\n//   to: '/buttons',\n//   icon: <CIcon icon={cilCursor} customClassName=\"nav-icon\" />,\n//   items: [\n//     {\n//       component: CNavItem,\n//       name: 'Buttons',\n//       to: '/buttons/buttons',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Buttons groups',\n//       to: '/buttons/button-groups',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Dropdowns',\n//       to: '/buttons/dropdowns',\n//     },\n//   ],\n// },\n// {\n//   component: CNavGroup,\n//   name: 'Forms',\n//   icon: <CIcon icon={cilNotes} customClassName=\"nav-icon\" />,\n//   items: [\n//     {\n//       component: CNavItem,\n//       name: 'Form Control',\n//       to: '/forms/form-control',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Select',\n//       to: '/forms/select',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Checks & Radios',\n//       to: '/forms/checks-radios',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Range',\n//       to: '/forms/range',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Input Group',\n//       to: '/forms/input-group',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Floating Labels',\n//       to: '/forms/floating-labels',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Layout',\n//       to: '/forms/layout',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Validation',\n//       to: '/forms/validation',\n//     },\n//   ],\n// },\n// {\n//   component: CNavItem,\n//   name: 'Charts',\n//   to: '/charts',\n//   icon: <CIcon icon={cilChartPie} customClassName=\"nav-icon\" />,\n// },\n// {\n//   component: CNavGroup,\n//   name: 'Icons',\n//   icon: <CIcon icon={cilStar} customClassName=\"nav-icon\" />,\n//   items: [\n//     {\n//       component: CNavItem,\n//       name: 'CoreUI Free',\n//       to: '/icons/coreui-icons',\n//       badge: {\n//         color: 'success',\n//         text: 'NEW',\n//       },\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'CoreUI Flags',\n//       to: '/icons/flags',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'CoreUI Brands',\n//       to: '/icons/brands',\n//     },\n//   ],\n// },\n// {\n//   component: CNavGroup,\n//   name: 'Notifications',\n//   icon: <CIcon icon={cilBell} customClassName=\"nav-icon\" />,\n//   items: [\n//     {\n//       component: CNavItem,\n//       name: 'Alerts',\n//       to: '/notifications/alerts',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Badges',\n//       to: '/notifications/badges',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Modal',\n//       to: '/notifications/modals',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Toasts',\n//       to: '/notifications/toasts',\n//     },\n//   ],\n// },\n// {\n//   component: CNavItem,\n//   name: 'Widgets',\n//   to: '/widgets',\n//   icon: <CIcon icon={cilCalculator} customClassName=\"nav-icon\" />,\n//   badge: {\n//     color: 'info',\n//     text: 'NEW',\n//   },\n// },\n// {\n//   component: CNavTitle,\n//   name: 'Extras',\n// },\n// {\n//   component: CNavGroup,\n//   name: 'Pages',\n//   icon: <CIcon icon={cilStar} customClassName=\"nav-icon\" />,\n//   items: [\n//     {\n//       component: CNavItem,\n//       name: 'Login',\n//       to: '/login',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Register',\n//       to: '/register',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Error 404',\n//       to: '/404',\n//     },\n//     {\n//       component: CNavItem,\n//       name: 'Error 500',\n//       to: '/500',\n//     },\n//   ],\n// },\n// ]\n\nexport default _nav\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler, CImage } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport { AppSidebarNav } from './AppSidebarNav'\n\n// import Logo from '../assets/brand/smart_id_logo.svg'\n// import { logoNegative } from 'src/assets/brand/logo-negative'\n// import { sygnet } from 'src/assets/brand/sygnet'\n\nimport SimpleBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\n\n// sidebar nav config\nimport navigation from '../_nav'\n\nconst AppSidebar = () => {\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <>\n      <CSidebar\n        position=\"fixed\"\n        // minimize=\"true\"\n        unfoldable={unfoldable}\n        visible={sidebarShow}\n        onVisibleChange={(visible) => {\n          dispatch({ type: 'set', sidebarShow: visible })\n        }}\n      >\n        <CSidebarBrand className=\"d-md-down-none\" to=\"/\">\n          <CImage src={'smart_id_logo.png'} fluid height=\"auto\" />\n          <CIcon className=\"c-sidebar-brand-minimized sss\" name=\"sygnet\" height={35} />\n        </CSidebarBrand>\n        <CSidebarNav>\n          <SimpleBar>\n            <AppSidebarNav items={navigation} />\n          </SimpleBar>\n        </CSidebarNav>\n        <CSidebarToggler\n          className=\"d-none d-lg-flex\"\n          onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n        />\n      </CSidebar>\n    </>\n  )\n}\n\nexport default React.memo(AppSidebar)\n","import React from 'react'\nimport { AppContent, AppSidebar, AppFooter, AppHeader } from '../components/index'\n\nconst DefaultLayout = () => {\n  return (\n    <div>\n      <AppSidebar />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n          <AppContent />\n        </div>\n        <AppFooter />\n      </div>\n    </div>\n  )\n}\n\nexport default DefaultLayout\n"],"sourceRoot":""}