{"version":3,"sources":["../node_modules/@coreui/icons/js/free/cil-user.js","views/customers/CustomerAdd.js"],"names":["cilUser","Register","React","Component","constructor","props","super","customerSubmit","e","preventDefault","errors","this","handleValidation","fields","state","customerData","name","email","password","type","fetch","process","method","headers","Authorization","auth","body","JSON","stringify","then","res","json","response","status","to","Object","entries","messages","map","key","value","setState","token","localStorage","getItem","User","parse","loggedIn","user","componentDidMount","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","handleChange","field","target","render","className","onSubmit","id","icon","size","placeholder","autoComplete","onChange","bind","style","color","cilLockLocked","block"],"mappings":"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","file":"static/js/12.3e5b1f3d.chunk.js","sourcesContent":["export const cilUser = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M411.6,343.656l-72.823-47.334,27.455-50.334A80.23,80.23,0,0,0,376,207.681V128a112,112,0,0,0-224,0v79.681a80.236,80.236,0,0,0,9.768,38.308l27.455,50.333L116.4,343.656A79.725,79.725,0,0,0,80,410.732V496H448V410.732A79.727,79.727,0,0,0,411.6,343.656ZM416,464H112V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479-41.64-76.341A48.146,48.146,0,0,1,184,207.681V128a80,80,0,0,1,160,0v79.681a48.146,48.146,0,0,1-5.861,22.985L296.5,307.007l97.662,63.479h0A47.836,47.836,0,0,1,416,410.732Z' class='ci-primary'/>\"]","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked } from '@coreui/icons'\nimport { cilUser } from '@coreui/icons'\nimport {\n  // CDataTable,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CButton,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n} from '@coreui/react'\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props)\n    const token = localStorage.getItem('token')\n    const User = JSON.parse(localStorage.getItem('user'))\n    let Authorization = token\n    let loggedIn = true\n\n    if (Authorization == null) {\n      loggedIn = false\n    }\n\n    this.state = {\n      auth: Authorization,\n      user: User,\n      fields: {},\n      errors: {},\n    }\n  }\n\n  componentDidMount() {}\n  handleValidation() {\n    let fields = this.state.fields\n    let errors = {}\n    let formIsValid = true\n\n    //Name\n    if (!fields['name']) {\n      formIsValid = false\n      errors['name'] = 'Cannot be empty'\n    }\n\n    if (typeof fields['name'] !== 'undefined') {\n      if (!fields['name'].match(/^[a-zA-Z]+$/)) {\n        formIsValid = false\n        errors['name'] = 'Only letters'\n      }\n    }\n\n    //Email\n    if (!fields['email']) {\n      formIsValid = false\n      errors['email'] = 'Cannot be empty'\n    }\n\n    if (typeof fields['email'] !== 'undefined') {\n      let lastAtPos = fields['email'].lastIndexOf('@')\n      let lastDotPos = fields['email'].lastIndexOf('.')\n\n      if (\n        !(\n          lastAtPos < lastDotPos &&\n          lastAtPos > 0 &&\n          fields['email'].indexOf('@@') == -1 &&\n          lastDotPos > 2 &&\n          fields['email'].length - lastDotPos > 2\n        )\n      ) {\n        formIsValid = false\n        errors['email'] = 'Email is not valid'\n      }\n    }\n    //Password\n    if (!fields['password']) {\n      formIsValid = false\n      errors['password'] = 'Cannot be empty'\n    }\n    if (!fields['conf_password']) {\n      formIsValid = false\n      errors['conf_password'] = 'Cannot be empty'\n    }\n    if (\n      fields['password'] &&\n      fields['conf_password'] &&\n      fields['password'] !== fields['conf_password']\n    ) {\n      formIsValid = false\n      errors['password'] = 'password mismatch'\n    }\n    this.setState({ errors: errors })\n    return formIsValid\n  }\n\n  customerSubmit = (e) => {\n    e.preventDefault()\n    let errors = {}\n    if (this.handleValidation()) {\n      let fields = this.state.fields\n      let customerData = {\n        name: fields.name,\n        email: fields.email,\n        password: fields.password,\n        type: 'customer',\n      }\n      fetch(process.env.REACT_APP_API_URL + 'api/customers', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          Authorization: this.state.auth,\n        },\n        body: JSON.stringify(customerData),\n      })\n        .then((res) => res.json())\n        .then((response) => {\n          if (response.status == 1) {\n            return <Redirect to=\"#/customers\" />\n          } else {\n            Object.entries(response.messages).map(([key, value]) => {\n              errors[key] = value\n            })\n            this.setState({ errors: errors })\n          }\n        })\n    } else {\n      //alert(\"Form has errors.\");\n    }\n  }\n\n  handleChange(field, e) {\n    let fields = this.state.fields\n    fields[field] = e.target.value\n    this.setState({ fields })\n  }\n  render() {\n    // if (this.state.user === null) {\n    //   return <Redirect to=\"/login\" />\n    // }\n    return (\n      <>\n        <CRow>\n          <CCol>\n            <CCard>\n              <CCardHeader>Customer Add</CCardHeader>\n              <CCardBody className=\"px-auto\">\n                <CForm onSubmit={this.customerSubmit}>\n                  <h1>Customer</h1>\n                  <p className=\"text-muted\">Create new Customer</p>\n                  <CInputGroup className=\"mb-3\">\n                    {/* <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend> */}\n                    <CInputGroupText id=\"basic-addon1\">\n                      <CIcon icon={cilUser} size=\"lx\" />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder=\"Username\"\n                      autoComplete=\"username\"\n                      onChange={this.handleChange.bind(this, 'name')}\n                      value={this.state.fields['name']}\n                    />\n                    <div style={{ color: 'red' }}>{this.state.errors['name']}</div>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText id=\"basic-addon1\">@</CInputGroupText>\n\n                    <CFormInput\n                      type=\"text\"\n                      name=\"email\"\n                      placeholder=\"Email\"\n                      autoComplete=\"email\"\n                      onChange={this.handleChange.bind(this, 'email')}\n                      value={this.state.fields['email']}\n                    />\n                    <div style={{ color: 'red' }}>{this.state.errors['email']}</div>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText id=\"basic-addon1\">\n                      <CIcon icon={cilLockLocked} size=\"lx\" />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                      onChange={this.handleChange.bind(this, 'password')}\n                      value={this.state.fields['password']}\n                    />\n                    <span style={{ color: 'red' }}>{this.state.errors['password']}</span>\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-4\">\n                    <CInputGroupText id=\"basic-addon1\">\n                      <CIcon icon={cilLockLocked} size=\"lx\" />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"password\"\n                      name=\"conf_password\"\n                      placeholder=\"Repeat password\"\n                      autoComplete=\"new-password\"\n                      onChange={this.handleChange.bind(this, 'conf_password')}\n                      value={this.state.fields['conf_password']}\n                    />\n                    <span style={{ color: 'red' }}>{this.state.errors['conf_password']}</span>\n                  </CInputGroup>\n                  <CButton type=\"submit\" color=\"success\" block>\n                    Create Account\n                  </CButton>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </>\n    )\n  }\n}\n\nexport default Register\n"],"sourceRoot":""}